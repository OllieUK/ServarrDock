version: '3.8'

services:

  ### UPDATING CONTAINERS
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ} # Set the time zone
      - WATCHTOWER_CLEANUP=true # Remove old images after updating
      - WATCHTOWER_POLL_INTERVAL=86400 # Check for updates every 24 hours (in seconds)

  ### NETWORK SERVICES
  traefik:  # Automatically monitors and updates running Docker containers when a new image is available.
    image: traefik:v2.5
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.myresolver.acme.email=${CF_API_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/acme.json"
      - "--certificatesResolvers.myresolver.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--api.dashboard=true"

    ports:
      - "80:80"
      - "443:443"

    environment:
      - "CF_API_EMAIL=${CF_API_EMAIL}"
      - "CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}"

    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
    - "traefik.http.routers.traefik.entrypoints=websecure"
    - "traefik.http.routers.traefik.tls.certresolver=myresolver"
    - "traefik.http.routers.traefik.service=api@internal"
    - "traefik.http.routers.traefik.tls=true"
    - "traefik.http.routers.traefik.tls.domains[0].main=${DOMAIN}"
    - "traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAIN}"


    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./config/traefik/acme.json:/acme.json"

    networks:
      - my-network
  gluetun:  # A VPN client container that supports multiple VPN providers, allowing your other containers to route their traffic through a secure VPN tunnel.
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      - VPNSP=${VPNSP}
      - OPENVPN_USER=${OPENVPN_USER}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - REGION=${VPN_REGION}
      - TZ=${TZ}
    cap_add:
      - NET_ADMIN
    networks:
      - my-network
    ports:
      - 8080:8080  #SABnzbd
      - 8090:8090  #qBittorrent
    labels:
      - traefik.enable=true

      - traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${DOMAIN}`)
      - traefik.http.routers.sabnzbd.service=sabnzbd
      - traefik.http.routers.sabnzbd.entrypoints=websecure
      - traefik.http.routers.sabnzbd.tls.certresolver=myresolver
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080

      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${DOMAIN}`)
      - traefik.http.routers.qbittorrent.service=qbittorrent
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.tls.certresolver=myresolver
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8090

    restart: unless-stopped
    volumes:
      - ./config/gluetun:/gluetun

### DOWNLOAD CLIENTS
  sabnzbd:  # A Usenet binary newsreader that automates the process of downloading and decoding binary files from Usenet newsgroups.
    image: ghcr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SABNZDB_HOST=0.0.0.0
    volumes:
      - ./config/sabnzbd:/config
      - ./media:/media
    network_mode: "service:gluetun"
  qbittorrent:  # A lightweight and feature-rich BitTorrent client that enables you to download torrents and manage your torrent files.
    image: ghcr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8090
    volumes:
      - ./config/qbittorrent:/config
      - ./media:/media
    network_mode: "service:gluetun"

### MEDIA MANAGERS
  prowlarr: # A meta-indexer and search aggregator for Usenet and torrent indexers, simplifying the integration between indexers and media managers like Sonarr, Radarr, and Lidarr.
    image: ghcr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/prowlarr:/config
      - ./media:/media
    networks:
      - my-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.http.routers.prowlarr.entrypoints=websecure
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
    restart: unless-stopped
  radarr: # A movie library manager that automates the process of searching for, downloading, and organizing movies from Usenet and torrent sources.
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/radarr:/config
      - ./media:/media
    networks:
      - my-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls.certresolver=myresolver
  sonarr: # A TV show library manager that automates the process of searching for, downloading, and organizing TV shows from Usenet and torrent sources.
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/sonarr:/config
      - ./media:/media
    networks:
      - my-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls.certresolver=myresolver  
  lidarr: # A music library manager that automates the process of searching for, downloading, and organizing music albums from Usenet and torrent sources.
    image: ghcr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/lidarr:/config
      - ./media:/media
    networks:
      - my-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)
      - traefik.http.routers.lidarr.entrypoints=websecure
      - traefik.http.routers.lidarr.tls.certresolver=myresolver

### WEB FRONTENDS
  heimdall: # A web-based front-end dashboard that allows you to organize, manage, and access all your self-hosted services in one place.
    image: ghcr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/heimdall:/config
    networks:
      - my-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.heimdall.rule=Host(`heimdall.${DOMAIN}`)
      - traefik.http.routers.heimdall.entrypoints=websecure
      - traefik.http.routers.heimdall.tls.certresolver=myresolver


  # Add your other services here
  # service1:
  # ...

networks:
  my-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16