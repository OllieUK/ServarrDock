
# ServarrDock: A self-hosted media management and automation system composed of various services.
# It includes a reverse proxy, downloaders, media library managers, and a dashboard.
# The downloaders are secured through a VPN service to maintain privacy.

version: '3.8'

services:

### UPDATING CONTAINERS
  watchtower: # Automatically monitors and updates running Docker containers when a new image is available.
    image: containrrr/watchtower # The Watchtower Docker image
    container_name: watchtower # The name of the container
    restart: unless-stopped # Restart policy: always restart the container unless it was manually stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Mount the Docker socket to allow Watchtower to communicate with the Docker daemon
    networks:
      my-network:
    environment:
      - TZ=${TZ} # Set the time zone for the container
      - WATCHTOWER_CLEANUP=true # Enable cleanup of old images after updating containers
      - WATCHTOWER_POLL_INTERVAL=86400 # Set the interval for checking for updates (86400 seconds = 24 hours)

### NETWORK SERVICES
  traefik:  # A modern reverse proxy and load balancer that enables routing requests from clients to the appropriate backend service based on the requested domain.
    image: traefik:v2.5 # The Traefik Docker image (version 2.5)
    container_name: traefik # The name of the container
    command:
      - "--log.level=DEBUG" # Set the log level to INFO
      - "--providers.docker=true" # Enable Docker as a configuration provider
      - "--providers.docker.exposedbydefault=false" # Disable exposing containers by default
      - "--entrypoints.web.address=:80" # Define the web entrypoint listening on port 80
      - "--entrypoints.websecure.address=:443" # Define the websecure entrypoint listening on port 443
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true" # Enable DNS challenge for Let's Encrypt
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare" # Set Cloudflare as the DNS provider
      - "--certificatesresolvers.myresolver.acme.email=${CF_API_EMAIL}" # Set the email for Let's Encrypt registration
      - "--certificatesresolvers.myresolver.acme.storage=/acme.json" # Define the storage file for ACME certificates
      - "--certificatesResolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53" # Set the DNS resolvers for the DNS challenge
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory" # (Optional) Use the Let's Encrypt staging server for testing
      - "--api.dashboard=true" # Enable the Traefik dashboard
      - "--providers.file.filename=/dynamic.yml"

    ports: # Expose container ports to the host
      - "80:80" # Expose HTTP port
      - "443:443" # Expose HTTPS port
    environment: # Environment variables for the container
      - "CF_API_EMAIL=${CF_API_EMAIL}" # Cloudflare API email
      - "CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}" # Cloudflare DNS API token
    labels: # Traefik-specific labels for routing and SSL
      - "traefik.enable=true" # Enable Traefik for this container
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)" # Router rule to match the host
      - "traefik.http.routers.traefik.entrypoints=websecure" # Use the websecure entrypoint
      - "traefik.http.routers.traefik.tls.certresolver=myresolver" # Use the defined certificate resolver
      - "traefik.http.routers.traefik.service=api@internal" # Use the internal Traefik API service
      - "traefik.http.routers.traefik.tls=true" # Enable TLS
      - "traefik.http.routers.traefik.tls.domains[0].main=${DOMAIN}" # Define the main domain for TLS
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAIN}" # Define a wildcard subdomain for TLS
      - "traefik.http.routers.traefik.middlewares=rateLimitMiddleware@file,authelia@file"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"  # Create a middleware named 'redirect-to-https' for HTTP to HTTPS redirection
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"  # Set the redirect as permanent (HTTP 301)
      - "traefik.http.services.traefik-servarrdock.loadbalancer.server.port=8080"
    volumes: # Bind mount host volumes to the container
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Mount the Docker socket (read-only)
      - "${CONFIG_PATH}/traefik/acme.json:/acme.json" # Mount the ACME storage file
      - "${CONFIG_PATH}/traefik/dynamic.yml:/dynamic.yml" # Mount the dynamic config file
    networks: # Connect the container to the specified network
      my-network: # The custom network
      home-macvlan:
        ipv4_address: ${NET_IP4_TRAEFIK}
  gluetun:  # A VPN client container that supports multiple VPN providers, allowing your other containers to route their traffic through a secure VPN tunnel.
    # image: qmcgaw/gluetun:latest # The Gluetun Docker image (latest version)
    image: qmcgaw/gluetun:v3.34 # The Gluetun Docker image (3.34 - workaround)
    container_name: gluetun # The name of the container
    devices:
      - /dev/net/tun:/dev/net/tun # Mount the TUN device for VPN tunneling
    environment: # Environment variables for the container
      - VPN_SERVICE_PROVIDER=${VPNSP} # VPN service provider
      - OPENVPN_USER=${OPENVPN_USER} # VPN username
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD} # VPN password
      - SERVER_REGIONS=${VPN_REGION} # VPN server region
      - TZ=${TZ} # Time zone
    cap_add:
      - NET_ADMIN # Grant the container network administration capabilities
    networks:
      my-network: # Connect the container to the custom network

    labels: # Traefik-specific labels for routing and SSL
      - traefik.enable=true # Enable Traefik for this container

    restart: unless-stopped # Restart policy
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/gluetun:/gluetun # Mount the Gluetun configuration directory
  authelia:  # Authelia is an open-source authentication and authorization server providing 2-factor authentication and single sign-on (SSO) for your applications via a web portal.
    image: authelia/authelia # The Authelia Docker image from the Docker Hub repository
    container_name: authelia # The name of the container
    volumes:
      - ${CONFIG_PATH}/authelia:/config # Mounts the configuration files and the users database from the host into the container
    environment:
      - AUTHELIA_JWT_SECRET=${AUTHELIA_JWT_SECRET} # JWT secret used for stateless sessions. This should be a long, randomly generated string
      - AUTHELIA_SESSION_SECRET=${AUTHELIA_SESSION_SECRET} # Session secret used by Authelia for server-side stored sessions. This should also be a long, randomly generated string
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD=${AUTHELIA_NOTIFIER_SMTP_PASSWORD} # Password for the SMTP server used to send verification emails (assuming you're using SMTP)
      # Add other necessary environment variables based on your Authelia configuration
    labels:
      - "traefik.enable=true" # Enable Traefik for this container, it makes the Authelia service discoverable by Traefik
      - "traefik.http.routers.authelia.rule=Host(`auth.home.carr-it.net`)" # Router rule that matches the domain name of the Authelia service
      - "traefik.http.routers.authelia.entrypoints=websecure" # Defines the entrypoint for this router, it should be the HTTPS entrypoint
      - "traefik.http.routers.authelia.tls.certresolver=myresolver" # This tells Traefik to use the previously defined certificate resolver for this service
      - "traefik.http.services.authelia.loadbalancer.server.port=9091" # Authelia's internal port that needs to be exposed to the network
      - "traefik.http.routers.authelia.middlewares=rateLimitMiddleware@file"
    networks:
      - my-network # The custom network, Authelia needs to be on the same network as Traefik for routing to work
  pihole: # Service name for Pi-Hole
    image: pihole/pihole:latest # Use the latest Pi-Hole Docker image
    container_name: pihole # Custom name for the Pi-Hole container
    environment: 
      TZ: ${TZ} # Use the time zone environment variable from your .env file
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD} # Admin password for the Pi-Hole web interface, defined in your .env file
      ServerIP: ${PIHOLE_IP4_ADDR} # Static IP for Pi-Hole, specified in your .env file
    volumes: 
      - ${CONFIG_PATH}/pihole/etc-pihole:/etc/pihole # Volume for Pi-Hole configuration persistence, using CONFIG_PATH from .env
      - ${CONFIG_PATH}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d # Volume for DNS settings persistence, using CONFIG_PATH from .env
    cap_add: 
      - NET_ADMIN # Necessary capability for network management
    networks: 
      home-macvlan: # Use the existing MACVLAN network defined in your docker-compose file
        ipv4_address: ${PIHOLE_IP4_ADDR} # Assigning the fixed IP address from .env file to Pi-Hole
    restart: unless-stopped # Restart policy for the container

### DOWNLOAD CLIENTS  
  sabnzbd:  # A Usenet binary newsreader that automates the process of downloading and decoding binary files from Usenet newsgroups.
    image: ghcr.io/linuxserver/sabnzbd # The SABnzbd Docker image from the LinuxServer.io repository
    container_name: sabnzbd # The name of the container
    depends_on:
      - gluetun
    environment: # Environment variables for the container
      - PUID=${PUID} # User ID for the container
      - PGID=${PGID} # Group ID for the container
      - TZ=${TZ} # Time zone
      - SABNZDB_HOST=0.0.0.0 # Bind the SABnzbd service to all available network interfaces
    labels:
      - traefik.enable=true # Enable Traefik for this container    
      - traefik.http.routers.sabnzbd.rule=Host(`download.${DOMAIN}`) && PathPrefix(`/sabnzbd`)  # Define the HTTP router rule based on the domain
      - traefik.http.routers.sabnzbd.service=sabnzbd-service # Define the service name
      - traefik.http.routers.sabnzbd.entrypoints=websecure # Use the websecure entrypoint
      - traefik.http.routers.sabnzbd.tls.certresolver=myresolver # Use the defined certificate resolver
      - traefik.http.routers.sabnzbd.middlewares=rateLimitMiddleware@file,authelia@file
      - traefik.http.services.sabnzbd-service.loadbalancer.server.port=8080 # Define the service port    
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/sabnzbd:/config # Mount the SABnzbd configuration directory
      - ${MEDIA_PATH}:/media # Mount the media directory for storing downloaded files
    network_mode: "service:gluetun" # Use the Gluetun container's network, routing SABnzbd traffic through the VPN tunnel
  qbittorrent:  # A lightweight and feature-rich BitTorrent client that enables you to download torrents and manage your torrent files.
    image: ghcr.io/linuxserver/qbittorrent # The qBittorrent Docker image from the LinuxServer.io repository
    container_name: qbittorrent # The name of the container
    depends_on:
      - gluetun
    environment: # Environment variables for the container
      - PUID=${PUID} # User ID for the container
      - PGID=${PGID} # Group ID for the container
      - TZ=${TZ} # Time zone
      - WEBUI_PORT=8090 # Port for the qBittorrent web interface
    labels:
      - traefik.enable=true # Enable Traefik for this container
      - traefik.http.routers.qbittorrent.service=qbittorrent-service # Define the service name
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.rule=Host(`download.${DOMAIN}`) && PathPrefix(`/qbittorrent`)
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=myresolver
      - traefik.http.routers.qbittorrent.middlewares=rateLimitMiddleware@file,authelia@file
      - traefik.http.middlewares.qbittorrent-redirect.redirectregex.regex=^(.*)/qbittorrent$$
      - traefik.http.middlewares.qbittorrent-redirect.redirectregex.replacement=$$1/qbittorrent/
      - traefik.http.middlewares.qbittorrent-strip.stripprefix.prefixes=/qbittorrent/
      - traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.X-Frame-Options=SAMEORIGIN
      - traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Referer=
      - traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Origin=
      - traefik.http.routers.qbittorrent.middlewares=qbittorrent-redirect,qbittorrent-strip,qbittorrent-headers
      - traefik.http.services.qbittorrent-service.loadbalancer.server.port=8090
      - traefik.http.services.qbittorrent-service.loadbalancer.passhostheader=false    
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/qbittorrent:/config # Mount the qBittorrent configuration directory
      - ${MEDIA_PATH}:/media # Mount the media directory for storing downloaded files
    network_mode: "service:gluetun" # Use the Gluetun container's network, routing qBittorrent traffic through the VPN tunnel
### MEDIA MANAGERS
  prowlarr: # A meta-indexer and search aggregator for Usenet and torrent indexers, simplifying the integration between indexers and media managers like Sonarr, Radarr, and Lidarr.
    image: ghcr.io/linuxserver/prowlarr:latest # The Prowlarr Docker image from the LinuxServer.io repository
    container_name: prowlarr # The name of the container
    depends_on:
      - gluetun
    environment: # Environment variables for the container
      - PUID=${PUID} # User ID for the container
      - PGID=${PGID} # Group ID for the container
      - TZ=${TZ} # Time zone
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/prowlarr:/config # Mount the Prowlarr configuration directory
      - ${MEDIA_PATH}:/media # Mount the media directory for storing downloaded files
    network_mode: "service:gluetun" # Set the network mode to use Gluetun's network, effectively routing traffic through Gluetun's VPN connection
    labels: # Traefik configuration labels
      - traefik.enable=true # Enable Traefik for this container
      - traefik.http.routers.prowlarr.rule=Host(`media.${DOMAIN}`) && PathPrefix(`/prowlarr`) # Define the routing rule for Prowlarr based on the domain
      - traefik.http.routers.prowlarr.entrypoints=websecure # Use the websecure entrypoint
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver # Use the myresolver certificate resolver
      - traefik.http.routers.prowlarr.middlewares=rateLimitMiddleware@file,authelia@file
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696 # Define the port for the Prowlarr service
    restart: unless-stopped # Restart policy for the container
  radarr: # A movie library manager that automates the process of searching for, downloading, and organizing movies from Usenet and torrent sources.
    image: ghcr.io/linuxserver/radarr # The Radarr Docker image from the LinuxServer.io repository
    container_name: radarr # The name of the container
    depends_on:
      - gluetun
    environment: # Environment variables for the container
      - PUID=${PUID} # User ID for the container
      - PGID=${PGID} # Group ID for the container
      - TZ=${TZ} # Time zone
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/radarr:/config # Mount the Radarr configuration directory
      - ${MEDIA_PATH}:/media # Mount the media directory for storing downloaded movies
    network_mode: "service:gluetun" # Set the network mode to use Gluetun's network, effectively routing traffic through Gluetun's VPN connection
    labels: # Traefik configuration labels
      - traefik.enable=true # Enable Traefik for this container
      - traefik.http.routers.radarr.rule=Host(`media.${DOMAIN}`) && PathPrefix(`/radarr`) # Define the routing rule for Radarr based on the domain
      - traefik.http.routers.radarr.entrypoints=websecure # Use the websecure entrypoint
      - traefik.http.routers.radarr.tls.certresolver=myresolver # Use the myresolver certificate resolver
      - traefik.http.routers.radarr.middlewares=rateLimitMiddleware@file,authelia@file
      - traefik.http.services.radarr.loadbalancer.server.port=7878 # Define the port for the Radarr service
  sonarr: # A TV show library manager that automates the process of searching for, downloading, and organizing TV shows from Usenet and torrent sources.
    image: ghcr.io/linuxserver/sonarr # The Sonarr Docker image from the LinuxServer.io repository
    container_name: sonarr # The name of the container
    depends_on:
      - gluetun
    environment: # Environment variables for the container
      - PUID=${PUID} # User ID for the container
      - PGID=${PGID} # Group ID for the container
      - TZ=${TZ} # Time zone
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/sonarr:/config # Mount the Sonarr configuration directory
      - ${MEDIA_PATH}:/media # Mount the media directory for storing downloaded TV shows
    network_mode: "service:gluetun" # Set the network mode to use Gluetun's network, effectively routing traffic through Gluetun's VPN connection
    labels:
      - traefik.enable=true # Enable Traefik for the Sonarr container
      - traefik.http.routers.sonarr.rule=Host(`media.${DOMAIN}`) && PathPrefix(`/sonarr`) # Define a router for access through Authelia
      - traefik.http.routers.sonarr.entrypoints=websecure # Set HTTPS as the entrypoint for sonarr
      - traefik.http.routers.sonarr.tls=true # Enable TLS
      - traefik.http.routers.sonarr.middlewares=rateLimitMiddleware@file,authelia@file # Apply rate limiting and Authelia middleware
      - traefik.http.routers.sonarr.service=sonarr-service # Link the router to the Sonarr service
      - traefik.http.services.sonarr-service.loadbalancer.server.port=8989 # Define the internal port for Sonarr service
  lidarr: # A music library manager that automates the process of searching for, downloading, and organizing music albums from Usenet and torrent sources.
    image: ghcr.io/linuxserver/lidarr # The Lidarr Docker image from the LinuxServer.io repository
    container_name: lidarr # The name of the container
    depends_on:
      - gluetun
    environment: # Environment variables for the container
      - PUID=${PUID} # User ID for the container
      - PGID=${PGID} # Group ID for the container
      - TZ=${TZ} # Time zone
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/lidarr:/config # Mount the Lidarr configuration directory
      - ${MEDIA_PATH}:/media # Mount the media directory for storing downloaded music albums
    network_mode: "service:gluetun" # Set the network mode to use Gluetun's network, effectively routing traffic through Gluetun's VPN connection
    labels: # Traefik configuration labels
      - traefik.enable=true # Enable Traefik for this container
      - traefik.http.routers.lidarr.rule=Host(`media.${DOMAIN}`) && PathPrefix(`/lidarr`) # Define the routing rule for Lidarr based on the domain
      - traefik.http.routers.lidarr.entrypoints=websecure # Use the websecure entrypoint
      - traefik.http.routers.lidarr.tls.certresolver=myresolver # Use the myresolver certificate resolver
      - traefik.http.routers.lidarr.middlewares=rateLimitMiddleware@file,authelia@file
      - traefik.http.services.lidarr.loadbalancer.server.port=8686 # Define the port for the Lidarr service
  bazarr:
    image: ghcr.io/linuxserver/bazarr
    container_name: bazarr
    depends_on:
      - gluetun
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_PATH}/bazarr:/config
      - ${MEDIA_PATH}:/media
    network_mode: "service:gluetun"
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=Host(`media.${DOMAIN}`) && PathPrefix(`/bazarr`)
      - traefik.http.routers.bazarr.entrypoints=websecure
      - traefik.http.routers.bazarr.tls.certresolver=myresolver
      - traefik.http.routers.bazarr.middlewares=rateLimitMiddleware@file,authelia@file
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
    restart: unless-stopped
### WEB FRONTENDS
  heimdall: # A web-based front-end dashboard that allows you to organize, manage, and access all your self-hosted services in one place.
    image: ghcr.io/linuxserver/heimdall # The Heimdall Docker image from the LinuxServer.io repository
    container_name: heimdall # The name of the container
    environment: # Environment variables for the container
      - PUID=${PUID} # User ID for the container
      - PGID=${PGID} # Group ID for the container
      - TZ=${TZ} # Time zone
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/heimdall:/config # Mount the Heimdall configuration directory
    networks:
      my-network:
      # home-macvlan: # Connect the container to the home-macvlan network
      #   ipv4_address: ${NET_IP4_HEIMDALL}
    labels: # Traefik configuration labels
      - traefik.enable=true # Enable Traefik for this container
      - traefik.http.routers.heimdall-http.rule=Host(`${DOMAIN}`) # Define the HTTP router rule for home.carr-it.net
      - traefik.http.routers.heimdall-http.entrypoints=web # Use the 'web' entrypoint for the HTTP router
      - traefik.http.routers.heimdall-http.middlewares=redirect-to-https # Apply the 'redirect-to-https' middleware to the HTTP router
      - traefik.http.routers.heimdall.rule=Host(`${DOMAIN}`) # Define the routing rule for home.carr-it.net
      - traefik.http.routers.heimdall.entrypoints=websecure # Use the websecure entrypoint
      - traefik.http.routers.heimdall.tls.certresolver=myresolver # Use the myresolver certificate resolver
      - traefik.http.services.heimdall.loadbalancer.server.port=80
      - traefik.http.routers.heimdall.middlewares=rateLimitMiddleware@file,authelia@file
  ombi: # A web application that gives Plex or Emby users the ability to request content
    image: linuxserver/ombi # The Ombi Docker image from the LinuxServer.io repository
    container_name: ombi # The name of the container
    environment: # Environment variables for the container
      - PUID=${PUID} # User ID for the container
      - PGID=${PGID} # Group ID for the container
      - TZ=${TZ} # Time zone
    volumes: # Bind mount host volumes to the container
      - ${CONFIG_PATH}/ombi:/config # Mount the Ombi configuration directory
    networks:
      my-network:
      home-macvlan:
        ipv4_address: ${NET_IP4_OMBI}
    labels: # Traefik configuration labels
      - traefik.enable=true # Enable Traefik for this container
      - traefik.http.routers.ombi.rule=Host(`${DOMAIN}`) && PathPrefix(`/ombi`) # Use the websecure entrypoint
      - traefik.http.routers.ombi.entrypoints=websecure # Use the websecure entrypoint
      - traefik.http.routers.ombi.tls.certresolver=myresolver # Use the myresolver certificate resolver
      - traefik.http.services.ombi.loadbalancer.server.port=3579 # Define the port for the Ombi service
      - traefik.http.routers.ombi.middlewares=rateLimitMiddleware@file
    restart: unless-stopped # Policy for automatically restarting the container
### MEDIA PLAYERS
  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
      # Uncomment the lines below for NVIDIA or Intel GPU hardware acceleration
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
    volumes:
      - ${CONFIG_PATH}/plex:/config
      - ${MEDIA_PATH}:/media
      - /tmp/plex:/transcode
    networks:
      home-macvlan:
        ipv4_address: ${NET_IP4_PLEX}
    # Uncomment the lines below for Intel GPU hardware acceleration
    devices:
      - "/dev/dri:/dev/dri"
      - "/dev/nvidia0:/dev/nvidia0"
      - "/dev/nvidiactl:/dev/nvidiactl"
      - "/dev/nvidia-uvm:/dev/nvidia-uvm"
    restart: unless-stopped
### OTHER MANAGEMENT TOOLS
  tautulli:
    image: ghcr.io/linuxserver/tautulli
    container_name: tautulli
    depends_on:
      - plex
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_PATH}/tautulli:/config
      - ${MEDIA_PATH}:/media
    network_mode: "service:plex"
    restart: unless-stopped

networks:
  my-network: # Name of the custom network
    driver: bridge # Use the bridge network driver, which connects containers on the same host
    ipam: # IP Address Management (IPAM) configuration
      config:
        - subnet: 172.25.0.0/16 # Define the subnet for the custom network (CIDR notation)
  home-macvlan:
    driver: macvlan
    driver_opts:
      parent: ${NET_NIC_NAME}
    ipam:
      config:
        - subnet: ${NET_IP4_NWADDR}
          gateway: ${NET_IP4_DEFGW}
